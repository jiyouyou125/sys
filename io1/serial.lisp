;;; -*- Mode:Lisp; Package:System-Internals; Base:8 -*-ç;;; ** (C) Copyright 1980, Massachusetts Institute of Technologyç;;;    Enhancements (C) Copyright 1981, Symbolics, Inc.ç;;; The Massachusetts Institute of Technology has acquired the rights from Symbolicsç;;; to include the Software covered by the foregoing notice of copyright with itsç;;; licenses of the Lisp Machine System **çç; Handler for the serial I/O interfaceçç;Make a stream.  Allowed keywords are:ç;  :ASCII-CHARACTERS -- T enables translation between Ascii and Lisp machine character setsç;  :ASCII-PROTOCOL -- obsolete name for :XON-XOFF-PROTOCOLç;  :BAUD -- baud rate.  Default is 300.ç;  :BUFFERING-CAPACITY -- number of characters output buffer, over 2.  Only if ASCII-PROTOCOLç;  :CHECK-FRAMING-ERRORS -- T enables error if break receivedç;  :CHECK-OVER-RUN-ERRORS -- T enables error if input characters lost in UARTç;ââââinput characters lost due to buffer overflow not detectedç;  :CHECK-PARITY-ERRORS -- T enables error if wrong parityç;  :DATA-TERMINAL-READY -- NIL disables DTR outputç;  :DLE-CHARACTER -- data link escape character for synchronous modeç;  :FORCE-OUTPUT -- NIL means you must :FORCE-OUTPUT to cause transmission,ç;â    T (the default) means an automatic :FORCE-OUTPUT occurs after :TYO/:STRING-OUTç;  :NUMBER-OF-STOP-BITS -- default 1ç;  :NUMBER-OF-DATA-BITS -- default 7  (doesn't include parity bit)ç;  :PARITY -- default :EVENç;  :REQUEST-TO-SEND -- NIL disables RTS outputç;  :SYNCHRONOUS-MODE -- T enables synchronous protocolç;  :SYN1-CHARACTER -- first sync character for synchronous modeç;  :SYN2-CHARACTER -- second sync character for synchronous modeç;  :XON-XOFF-PROTOCOL -- T enables XON/XOFF (^S/^Q) control of outputç; also a variety of more random options, see the :PUT messageçç(DEFUN MAKE-SERIAL-STREAM (&REST KEYWORDS)ç  (INSTANTIATE-FLAVOR (IF (GETL (LOCF KEYWORDS) '(:XON-XOFF-PROTOCOL :ASCII-PROTOCOL))çâââ  (IF (GET (LOCF KEYWORDS) ':ASCII-CHARACTERS)çâââ      'SERIAL-ASCII-XON-XOFF-STREAMçâââ      'SERIAL-XON-XOFF-STREAM)çâââ  (IF (GET (LOCF KEYWORDS) ':ASCII-CHARACTERS)çâââ      'SERIAL-ASCII-STREAMçâââ      'SERIAL-STREAM))çââ      (LOCF KEYWORDS)çââ      T))çç;Print the complete hardware statusç(DEFUN SERIAL-STATUS ()ç  (LET ((MODE (SERIAL-READ-MODE))çâ(STATUS (%UNIBUS-READ 764162))çâ(COMMAND (%UNIBUS-READ 764166))çâ(SYNCHRONOUS-P NIL))ç    (AND (ZEROP (LDB 1002 MODE)) (SETQ SYNCHRONOUS-P T))ç    (SELECTQ (LDB 0602 COMMAND)ç      (0 )ç      (1 (PRINC (IF SYNCHRONOUS-P "syn//dle-stripping " "auto-echo ")))ç      (2 (PRINC "local-loop-back "))ç      (3 (PRINC "remote-loop-back ")))ç    (AND (BIT-TEST 40 COMMAND) (PRINC "request-to-send "))ç    (AND (BIT-TEST 2 COMMAND) (PRINC "data-terminal-ready "))ç    (AND (BIT-TEST 10 COMMAND) (PRINC (IF SYNCHRONOUS-P "send-dle" "send-break")))ç    (FORMAT T "receiver-~[off~;on~] " (LDB 0201 COMMAND))ç    (FORMAT T "transmitter-~[off~;on~]~%" (LDB 0001 COMMAND))ç    (FORMAT T "interrupt-~[dis~;en~]able " (LDB 0701 (%UNIBUS-READ 764112)))ç    (AND (BIT-TEST 200 STATUS) (PRINC "data-set-ready "))ç    (AND (BIT-TEST 100 STATUS) (PRINC "carrier-detect "))ç    (AND (BIT-TEST 40 STATUS) (PRINC (IF SYNCHRONOUS-P "sync-detect " "break-received ")))ç    (AND (BIT-TEST 20 STATUS) (PRINC "receive-overrun "))ç    (AND (BIT-TEST 10 STATUS) (PRINC (IF SYNCHRONOUS-P "par-err-or-dle " "parity-error ")))ç    (AND (BIT-TEST 4 STATUS) (PRINC "idle//data-set-change "))ç    (AND (BIT-TEST 2 STATUS) (PRINC "receive-ready "))ç    (AND (BIT-TEST 1 STATUS) (PRINC "transmit-ready "))ç    (TERPRI)ç    (FORMAT T "~[ILLEGAL~;1~;1.5~;2~] stop bits, " (LDB 1602 MODE))ç    (FORMAT T "~[no~;odd~;no~;even~] parity, " (LDB 1402 MODE))ç    (FORMAT T "~D data bits, " (+ 5 (LDB 1202 MODE)))ç    (FORMAT T "~[synchronous~;asynchronous~;asynchronous//16~;asynchronous//64~]~%"çâ      (LDB 1002 MODE))ç    (FORMAT T "~[external~;internal~] transmit clock, " (LDB 0501 MODE))ç    (FORMAT T "~[external~;internal~] receive clock, " (LDB 0401 MODE))ç    (FORMAT T "~D baud" (NTH (LDB 0004 MODE) '(50. 75. 110. 134. 150. 300. 600.çâââââ       1200. 1800. 2000. 2400. 3600.çâââââ       4800. 7200. 9600. 19200.)))))çåç(DEFFLAVOR BASIC-SERIAL-STREAM (INPUT-UNIBUS-CHANNEL OUTPUT-UNIBUS-CHANNELçââââ(UART-COMMAND 5)â;receive, transmit enableçââââ(UART-MODES 0) (FORCE-OUTPUT T)çââââ(DLE-CHARACTER 0) (SYN1-CHARACTER 0) (SYN2-CHARACTER 0)çââââ(SERIAL-UNRCHF NIL) (SERIAL-ERROR-MASK 0))çâ   (SI:BIDIRECTIONAL-STREAM SI:CHARACTER-STREAMçâ    SI:UNBUFFERED-LINE-INPUT-STREAM SI:LINE-OUTPUT-STREAM-MIXINçâ    SI:BASIC-BUFFERED-OUTPUT-STREAM)ç  (:INITABLE-INSTANCE-VARIABLES FORCE-OUTPUT DLE-CHARACTER SYN1-CHARACTER SYN2-CHARACTER)ç  (:INIT-KEYWORDS :CHECK-PARITY-ERRORS :CHECK-OVER-RUN-ERRORS :CHECK-FRAMING-ERRORSçââ  :REQUEST-TO-SEND :DATA-TERMINAL-READY :SYNCHRONOUS-MODEçââ  :NUMBER-OF-STOP-BITS :PARITY :NUMBER-OF-DATA-BITS :BAUDçââ  :XON-XOFF-PROTOCOL :ASCII-PROTOCOL :ASCII-CHARACTERS)ç  (:DOCUMENTATION :BASE-FLAVOR "Basis for RS232 Serial I//O Streams"))çç(DEFFLAVOR SERIAL-STREAM () (BASIC-SERIAL-STREAM SI:BUFFERED-OUTPUT-STREAM)ç  (:DOCUMENTATION :COMBINATION "RS232 Serial I//O Stream, no character-set translation"))çç(DEFFLAVOR SERIAL-ASCII-STREAM ()çâ   (SI:ASCII-TRANSLATING-OUTPUT-STREAM-MIXIN SI:ASCII-TRANSLATING-INPUT-STREAM-MIXINçâ    BASIC-SERIAL-STREAM)ç  (:DOCUMENTATION :COMBINATION "RS232 Serial I//O Stream, Ascii character translation"))çç;;; Housekeeping methodsç(DEFMETHOD (BASIC-SERIAL-STREAM :INIT) (INIT-PLIST)ç  (SERIAL-CHECK-EXISTENCE)ââ;Barf if machine doesn't have a serial I/O portç  (LET ((REQUEST-TO-SEND T)ââ;Parse optionsçâ(DATA-TERMINAL-READY T)çâ(SYNCHRONOUS-MODE NIL))ç    (LOOP FOR (KWD VAL) ON (CDR INIT-PLIST) BY 'CDDR DOç      (SELECTQ KWDçâ(:REQUEST-TO-SEND (SETQ REQUEST-TO-SEND VAL))çâ(:DATA-TERMINAL-READY (SETQ DATA-TERMINAL-READY VAL))çâ(:SYNCHRONOUS-MODE (SETQ SYNCHRONOUS-MODE VAL))))ç    (%UNIBUS-WRITE 764166 20)ââ;Resetç    (SERIAL-WRITE-COMMAND UART-COMMAND)â;Unreset, enable receiver and transmitterç    (SERIAL-WRITE-MODE 60)ââ;Reset modes, set to internal clocksç    ;; Set up modes which want to be specified firstç    (FUNCALL-SELF ':PUT ':SYNCHRONOUS-MODE SYNCHRONOUS-MODE)ç    (FUNCALL-SELF ':PUT ':REQUEST-TO-SEND REQUEST-TO-SEND)ç    (FUNCALL-SELF ':PUT ':DATA-TERMINAL-READY DATA-TERMINAL-READY)ç    ;; Default to even parity and 7 data bits,ç    ;; but don't check received parity.  This causes theç    ;; input stream to return 7-bit characters, to avoidç    ;; faking out Lisp-machine-oriented programs.ç    (FUNCALL-SELF ':PUT ':NUMBER-OF-STOP-BITS 1)ç    (FUNCALL-SELF ':PUT ':PARITY ':EVEN)ç    (FUNCALL-SELF ':PUT ':NUMBER-OF-DATA-BITS 7)ç    (FUNCALL-SELF ':PUT ':BAUD 300.)ç    ;; Now do :PUT for any necessary optionsç    (LOOP FOR (KWD VAL) ON (CDR INIT-PLIST) BY 'CDDRçâ  UNLESS (MEMQ KWD '(:REQUEST-TO-SEND :DATA-TERMINAL-READY :SYNCHRONOUS-MODEçâââ     :XON-XOFF-PROTOCOL :ASCII-PROTOCOL :BUFFERING-CAPACITYçâââ     :ASCII-CHARACTERS :FORCE-OUTPUTçâââ     :DLE-CHARACTER :SYN1-CHARACTER :SYN2-CHARACTER))çâ    DO (FUNCALL-SELF ':PUT KWD VAL))ç    (FUNCALL-SELF ':RESET)))â;Sets up the Unibus channelsçç;Test existence of device.  If IOB not wired for it, will read backç;all zero.  If PCI not plugged in, will read back all ones.ç(DEFUN SERIAL-CHECK-EXISTENCE (&AUX ZEROS ONES)ç  (%UNIBUS-WRITE 764166 0)ç  (SETQ ZEROS (LDB 0010 (%UNIBUS-READ 764166)))ç  (%UNIBUS-WRITE 764166 100)ç  (SETQ ONES (LDB 0010 (%UNIBUS-READ 764166)))ç  (COND ((ZEROP ONES) (FERROR NIL "This IOB does not have serial I/O"))çâ((= ZEROS 377) (FERROR NIL "This IOB does not contain a PCI"))))çç;Get the various modes, hardware status, etc.ç(DEFMETHOD (BASIC-SERIAL-STREAM :GET) (PROP)ç  (LET ((MODE (SERIAL-READ-MODE))çâ(STATUS (%UNIBUS-READ 764162))çâ(COMMAND (%UNIBUS-READ 764166))çâ(SYNCHRONOUS-P NIL))ç    (AND (ZEROP (LDB 1002 MODE)) (SETQ SYNCHRONOUS-P T))ç    (SELECTQ PROPç      (:DATA-SET-READY (BIT-TEST 200 STATUS))â;This might want to be wired to CTS?ç      (:CARRIER-DETECT (BIT-TEST 100 STATUS))ç      (:REQUEST-TO-SEND (BIT-TEST 40 COMMAND))ç      (:DATA-TERMINAL-READY (BIT-TEST 2 COMMAND))ç      (:NUMBER-OF-STOP-BITS (IF SYNCHRONOUS-P 0çâââ      (NTH (LDB 1602 MODE) '(? 1 1.5 2))))ç      (:PARITY (NTH (LDB 1402 MODE) '(NIL :ODD NIL :EVEN)))ç      (:NUMBER-OF-DATA-BITS (+ 5 (LDB 1202 MODE)))ç      (:BAUD (NTH (LDB 0004 MODE) '(50. 75. 110. 134. 150. 300. 600.çâââââ1200. 1800. 2000. 2400. 3600.çâââââ4800. 7200. 9600. 19200.)))ç      (:SYNCHRONOUS-MODE SYNCHRONOUS-P)ç      (:SYN1-CHARACTER SYN1-CHARACTER)ç      (:SYN2-CHARACTER SYN2-CHARACTER)ç      (:DLE-CHARACTER DLE-CHARACTER)ç      (:SINGLE-SYNC-CHAR-MODE (AND SYNCHRONOUS-P (BIT-TEST 100000 MODE)))ç      (:SYNC-TRANSPARENT-MODE (AND SYNCHRONOUS-P (BIT-TEST 40000 MODE)))ç      (:AUTOMATIC-ECHO-MODE (AND (NOT SYNCHRONOUS-P) (= (LDB 0602 COMMAND) 1)))ç      (:SYNC-DLE-STRIPPING-MODE (AND SYNCHRONOUS-P (= (LDB 0602 COMMAND) 1)))ç      (:LOCAL-LOOP-BACK (= (LDB 0602 COMMAND) 2))ç      (:REMOTE-LOOP-BACK (= (LDB 0602 COMMAND) 3))ç      (:RECEIVE-ENABLE (BIT-TEST 4 COMMAND))ç      (:TRANSMIT-ENABLE (BIT-TEST 1 COMMAND))ç      (:CHECK-PARITY-ERRORS (BIT-TEST 10 SERIAL-ERROR-MASK))ç      (:CHECK-OVER-RUN-ERRORS (BIT-TEST 20 SERIAL-ERROR-MASK))ç      (:CHECK-FRAMING-ERRORS (BIT-TEST 40 SERIAL-ERROR-MASK))ç      (:OTHERWISE (FERROR NIL "~S not a valid property name" PROP)))))çç(DEFUN SERIAL-READ-MODE ()ç  (%UNIBUS-READ 764166)ââ;reset MODE1/MODE2 phaseç  (DPB (%UNIBUS-READ 764164) 1010 (%UNIBUS-READ 764164)))çç;Change modes, hardware status, etc.ç(DEFMETHOD (BASIC-SERIAL-STREAM :PUT) (PROP VAL)ç  (LET ((MODE (SERIAL-READ-MODE))çâ(SYNCHRONOUS-P NIL))ç    (AND (ZEROP (LDB 1002 MODE)) (SETQ SYNCHRONOUS-P T))ç    (SELECTQ PROPç      (:REQUEST-TO-SEND (SERIAL-WRITE-COMMAND (LOGIOR 40 UART-COMMAND)))ç      (:DATA-TERMINAL-READY (SERIAL-WRITE-COMMAND (LOGIOR 2 UART-COMMAND)))ç      (:NUMBER-OF-STOP-BITSç       (SETQ VAL (SELECT VAL (1 1) (1.5 2) (2 3)çâââ (OTHERWISE (FERROR NIL "~S must be 1, 1.5, or 2" VAL))))ç       (SERIAL-WRITE-MODE (DPB VAL 1602 MODE)))ç      (:PARITYç       (SETQ VAL (SELECTQ VAL (NIL 0) (:ODD 1) (:EVEN 3)çâââ  (OTHERWISE (FERROR NIL "~S must be NIL, :ODD, or :EVEN" VAL))))ç       (SERIAL-WRITE-MODE (DPB VAL 1402 MODE)))ç      (:NUMBER-OF-DATA-BITSç       (SETQ VAL (IF (AND (> VAL 4) (< VAL 9)) (- VAL 5)çââ   (FERROR NIL "~S must be 5, 6, 7, or 8" VAL)))ç       (SERIAL-WRITE-MODE (DPB VAL 1202 MODE)))ç      (:BAUDç       (SETQ VAL (FIND-POSITION-IN-LIST VAL '(50. 75. 110. 134. 150. 300. 600.çââââââ  1200. 1800. 2000. 2400. 3600.çââââââ  4800. 7200. 9600. 19200.)))ç       (OR VAL (FERROR NIL "invalid baud rate"))ç       (SERIAL-WRITE-MODE (DPB VAL 0004 MODE)))ç      (:SYNCHRONOUS-MODEç       (AND VAL (SERIAL-WRITE-SYNC-CHARS SYN1-CHARACTER SYN2-CHARACTER DLE-CHARACTER))ç       (SERIAL-WRITE-MODE (DPB (IF VAL 0 1) 1002 MODE)))ç      (:SYN1-CHARACTERç       (SETQ SYN1-CHARACTER VAL)ç       (SERIAL-WRITE-SYNC-CHARS SYN1-CHARACTER SYN2-CHARACTER DLE-CHARACTER))ç      (:SYN2-CHARACTERç       (SETQ SYN2-CHARACTER VAL)ç       (SERIAL-WRITE-SYNC-CHARS SYN1-CHARACTER SYN2-CHARACTER DLE-CHARACTER))ç      (:DLE-CHARACTERç       (SETQ DLE-CHARACTER VAL)ç       (SERIAL-WRITE-SYNC-CHARS SYN1-CHARACTER SYN2-CHARACTER DLE-CHARACTER))ç      (:SINGLE-SYNC-CHAR-MODEç       (SERIAL-WRITE-MODE (DPB (IF VAL 1 0) 1701 MODE)))ç      (:SYNC-TRANSPARENT-MODEç       (SERIAL-WRITE-MODE (DPB (IF VAL 1 0) 1601 MODE)))ç      (:AUTOMATIC-ECHO-MODEç       (AND SYNCHRONOUS-P (FERROR NIL "does not apply in synchronous mode"))ç       (SERIAL-WRITE-COMMAND (DPB (IF VAL 1 0) 0602 UART-COMMAND)))ç      (:SYNC-DLE-STRIPPING-MODEç       (AND (NOT SYNCHRONOUS-P) (FERROR NIL "does not apply in asynchronous mode"))ç       (SERIAL-WRITE-COMMAND (DPB (IF VAL 1 0) 0602 UART-COMMAND)))ç      (:LOCAL-LOOP-BACKç       (SERIAL-WRITE-COMMAND (DPB (IF VAL 2 0) 0602 UART-COMMAND)))ç      (:REMOTE-LOOP-BACKç       (SERIAL-WRITE-COMMAND (DPB (IF VAL 3 0) 0602 UART-COMMAND)))ç      (:RECEIVE-ENABLEç       (SERIAL-WRITE-COMMAND (DPB (IF VAL 1 0) 0201 UART-COMMAND)))ç      (:TRANSMIT-ENABLEç       (SERIAL-WRITE-COMMAND (DPB (IF VAL 1 0) 0001 UART-COMMAND)))ç      (:CHECK-PARITY-ERRORSç       (SETQ SERIAL-ERROR-MASK (DPB (IF VAL 1 0) 0301 SERIAL-ERROR-MASK)))ç      (:CHECK-OVER-RUN-ERRORSç       (SETQ SERIAL-ERROR-MASK (DPB (IF VAL 1 0) 0401 SERIAL-ERROR-MASK)))ç      (:CHECK-FRAMING-ERRORSç       (SETQ SERIAL-ERROR-MASK (DPB (IF VAL 1 0) 0501 SERIAL-ERROR-MASK)))ç      (:OTHERWISE (FERROR NIL "~S not a valid property name" PROP)))))çç(DECLARE-FLAVOR-INSTANCE-VARIABLES (BASIC-SERIAL-STREAM)ç(DEFUN SERIAL-WRITE-COMMAND (CMD)ç  (SETQ UART-COMMAND CMD)âââ;remember itç  (IF (BOUNDP 'OUTPUT-UNIBUS-CHANNEL)ç      (%P-DPB-OFFSET (LOGAND CMD 376) %%Q-POINTER OUTPUT-UNIBUS-CHANNELçââ     %UNIBUS-CHANNEL-OUTPUT-TURNOFF-BITS))ç  (%UNIBUS-WRITE 764166 CMD)))çç(DEFUN SERIAL-WRITE-SYNC-CHARS (SYN1 SYN2 DLE)ç  (%UNIBUS-READ 764166)ââ;reset MODE1/MODE2 phaseç  (%UNIBUS-WRITE 764162 SYN1)ç  (%UNIBUS-WRITE 764162 SYN2)ç  (%UNIBUS-WRITE 764162 DLE))çç(DECLARE-FLAVOR-INSTANCE-VARIABLES (BASIC-SERIAL-STREAM)ç(DEFUN SERIAL-WRITE-MODE (MODE)ç  (SETQ UART-MODES MODE)â;remember itç  (%UNIBUS-READ 764166)ââ;reset MODE1/MODE2 phaseç  (%UNIBUS-WRITE 764164 (LDB 1010 MODE))ç  (%UNIBUS-WRITE 764164 MODE)))çç(DEFMETHOD (BASIC-SERIAL-STREAM :CLOSE) (&OPTIONAL ABORT-P)ç  (AND (NOT ABORT-P) (BOUNDP 'OUTPUT-UNIBUS-CHANNEL) OUTPUT-UNIBUS-CHANNELç       (FUNCALL-SELF ':FINISH))ç  (%UNIBUS-WRITE 764112 (DPB 0 0701 (%UNIBUS-READ 764112)))â;Turn off interruptç  ;Following code commented out, due to bug in MAKUNBOUND (doesn't work on instance vars)ç;  (IF (BOUNDP 'INPUT-UNIBUS-CHANNEL)ç;      (RETURN-UNIBUS-CHANNEL (PROG1 INPUT-UNIBUS-CHANNELç;ââââ    (MAKUNBOUND 'INPUT-UNIBUS-CHANNEL))))ç;  (IF (BOUNDP 'OUTPUT-UNIBUS-CHANNEL)ç;      (RETURN-UNIBUS-CHANNEL (PROG1 OUTPUT-UNIBUS-CHANNELç;ââââ    (MAKUNBOUND 'OUTPUT-UNIBUS-CHANNEL))))ç  (AND (BOUNDP 'INPUT-UNIBUS-CHANNEL) INPUT-UNIBUS-CHANNELç       (RETURN-UNIBUS-CHANNEL (PROG1 INPUT-UNIBUS-CHANNELçââââ     (SETQ INPUT-UNIBUS-CHANNEL NIL))))ç  (AND (BOUNDP 'OUTPUT-UNIBUS-CHANNEL) OUTPUT-UNIBUS-CHANNELç       (RETURN-UNIBUS-CHANNEL (PROG1 OUTPUT-UNIBUS-CHANNELçââââ     (SETQ OUTPUT-UNIBUS-CHANNEL NIL)))))çç(DEFMETHOD (BASIC-SERIAL-STREAM :FINISH) ()ç  (PROCESS-WAIT "Serial Finish"çââ#'(LAMBDA (CHAN) (NOT (UNIBUS-CHANNEL-NOT-EMPTY CHAN)))çââOUTPUT-UNIBUS-CHANNEL))çç;This fully resets the hardware.ç(DEFMETHOD (BASIC-SERIAL-STREAM :CLEAR-INPUT) ()ç  (FUNCALL-SELF ':RESET NIL))çç(DEFMETHOD (BASIC-SERIAL-STREAM :RESET) (&OPTIONAL (ABORT-OUTPUT ':ABORT))ç    (FUNCALL-SELF ':CLOSE ABORT-OUTPUT)â;Get rid of unibus channels if anyç    ;; Reset the stupid error flagsç    (%UNIBUS-WRITE 764166 (LOGIOR 20 UART-COMMAND))ç    (%UNIBUS-WRITE 764166 UART-COMMAND)ç    (SERIAL-WRITE-MODE UART-MODES)â;Restore mode registersç    (%UNIBUS-READ 764160)â;Flush buffered input character if anyç    (SETQ INPUT-UNIBUS-CHANNEL (GET-UNIBUS-CHANNEL 264 764162 2 764160 2))ç    (SETQ OUTPUT-UNIBUS-CHANNEL (GET-UNIBUS-CHANNEL 264 764162 1 764160 1 çââââââ    764166 (LOGAND UART-COMMAND 376)))ç    (%UNIBUS-WRITE 764112 (DPB 1 0701 (%UNIBUS-READ 764112)))) ;Turn on interruptçç;;; Stream Input Protocolç(DEFMETHOD (BASIC-SERIAL-STREAM :TYI) (&OPTIONAL IGNORE)ç  (COND ((NULL SERIAL-UNRCHF)çâ (PROCESS-WAIT "Serial TYI" #'UNIBUS-CHANNEL-NOT-EMPTY INPUT-UNIBUS-CHANNEL)çâ (MULTIPLE-VALUE-BIND (CH STATUS) (READ-UNIBUS-CHANNEL INPUT-UNIBUS-CHANNEL)çâ   (SETQ CH (LOGAND 377 CH))çâ   (COND ((BIT-TEST SERIAL-ERROR-MASK STATUS)çââ  ;; Reset the stupid error flagsçââ  (%UNIBUS-WRITE 764166 (LOGIOR 20 UART-COMMAND))çââ  (%UNIBUS-WRITE 764166 UART-COMMAND)çââ  (CERROR T NIL NILçâââ  "Serial input ~:[framing ~]~:[over-run ~]~:[parity ~]error: ~O"çâââ  (ZEROP (LOGAND 40 STATUS SERIAL-ERROR-MASK))çâââ  (ZEROP (LOGAND 20 STATUS SERIAL-ERROR-MASK))çâââ  (ZEROP (LOGAND 10 STATUS SERIAL-ERROR-MASK))çâââ  CH)))çâ   CH))çâ(T (PROG1 SERIAL-UNRCHF (SETQ SERIAL-UNRCHF NIL)))))çç(DEFMETHOD (BASIC-SERIAL-STREAM :UNTYI) (CHAR)ç  (SETQ SERIAL-UNRCHF CHAR))çç(DEFMETHOD (BASIC-SERIAL-STREAM :LISTEN) ()ç  (OR (NOT (NULL SERIAL-UNRCHF))ç      (UNIBUS-CHANNEL-NOT-EMPTY INPUT-UNIBUS-CHANNEL)))çç(DEFMETHOD (BASIC-SERIAL-STREAM :TYI-NO-HANG) ()ç  (AND (UNIBUS-CHANNEL-NOT-EMPTY INPUT-UNIBUS-CHANNEL)ç       (FUNCALL-SELF ':TYI)))çç;;; Next three methods implement buffered output stream protocolç(DEFMETHOD (BASIC-SERIAL-STREAM :NEW-OUTPUT-BUFFER) ()ç  (PROCESS-WAIT "Serial TYO" #'UNIBUS-CHANNEL-NOT-FULL OUTPUT-UNIBUS-CHANNEL)ç  (MULTIPLE-VALUE-BIND (START END) (UNIBUS-CHANNEL-SPACE-AVAILABLE OUTPUT-UNIBUS-CHANNEL)ç    (VALUES OUTPUT-UNIBUS-CHANNEL START END)))çç(DEFMETHOD (BASIC-SERIAL-STREAM :SEND-OUTPUT-BUFFER) (IGNORE NEW-INDEX)ç  (UNIBUS-CHANNEL-ADVANCE OUTPUT-UNIBUS-CHANNEL NEW-INDEX)ç  (%UNIBUS-WRITE 764166 UART-COMMAND))â;Enables the transmitterçç(DEFMETHOD (BASIC-SERIAL-STREAM :DISCARD-OUTPUT-BUFFER) (IGNORE)ç  NIL)çç;The inherited method for this (from BUFFERED-OUTPUT-STREAM) does not workç;because we have a single circular buffer, so just puntç(DEFMETHOD (BASIC-SERIAL-STREAM :FRESH-LINE) ()ç  (FUNCALL-SELF ':TYO #\CR))çç;For compatibility with the old unbuffered stream, we provide a mode whereç;you don't have to do :FORCE-OUTPUT manually, and even make it the default.ç;This should be a mixin, but it was too inconvenient to have so many flavorsç;for such a trivial thing.ç(DEFMETHOD (BASIC-SERIAL-STREAM :AFTER :TYO) (IGNORE)ç  (AND FORCE-OUTPUT (FUNCALL-SELF ':FORCE-OUTPUT)))çç(DEFMETHOD (BASIC-SERIAL-STREAM :AFTER :STRING-OUT) (&REST IGNORE)ç  (AND FORCE-OUTPUT (FUNCALL-SELF ':FORCE-OUTPUT)))çåç(DEFFLAVOR SERIAL-XON-XOFF-MIXIN ((BUFFERING-CAPACITY 10.)) ()ç  (:INITABLE-INSTANCE-VARIABLES BUFFERING-CAPACITY)ç  (:REQUIRED-FLAVORS BASIC-SERIAL-STREAM)ç  (:DOCUMENTATION :MIXIN "Serial output controlled by XON and XOFF characters.ç   BUFFERING-CAPACITY is one half the allowed number of characters between XOFF checks."))çç(DEFFLAVOR SERIAL-XON-XOFF-STREAM () (SERIAL-XON-XOFF-MIXIN SERIAL-STREAM)ç  (:DOCUMENTATION :COMBINATIONçââ  "RS232 Serial I//O Stream, XON//XOFF, no character translation"))çç(DEFFLAVOR SERIAL-ASCII-XON-XOFF-STREAM () (SERIAL-XON-XOFF-MIXIN SERIAL-ASCII-STREAM)ç  (:DOCUMENTATION :COMBINATIONçââ  "RS232 Serial I//O Stream, XON//XOFF, ascii character translation"))çç(DEFMETHOD (SERIAL-XON-XOFF-MIXIN :NEW-OUTPUT-BUFFER) ()ç  (PROCESS-WAIT "Serial TYO"çââ#'UNIBUS-CHANNEL-NOT-FULL OUTPUT-UNIBUS-CHANNEL BUFFERING-CAPACITY)ç  (LET ((CH (FUNCALL-SELF ':TYI-NO-HANG)))ç    (SELECTQ CHç      (23â;XOFF (^S)ç        (LOOP DO (PROCESS-WAIT "Serial XON" #'UNIBUS-CHANNEL-NOT-EMPTY INPUT-UNIBUS-CHANNEL)çâ      UNTIL (= (FUNCALL-SELF ':TYI) 21)))â;XON (^Q)ç      (NIL )ç      (OTHERWISE (FERROR NIL "Unexpected character ~O received" CH))))ç  (MULTIPLE-VALUE-BIND (START END) (UNIBUS-CHANNEL-SPACE-AVAILABLE OUTPUT-UNIBUS-CHANNEL)ç    (IF (> (- END START) BUFFERING-CAPACITY)çâ(SETQ END (+ START BUFFERING-CAPACITY)))ç    (VALUES OUTPUT-UNIBUS-CHANNEL START END)))çç(COMPILE-FLAVOR-METHODS SERIAL-STREAM SERIAL-ASCII-STREAMçâââSERIAL-XON-XOFF-STREAM SERIAL-ASCII-XON-XOFF-STREAM)ç